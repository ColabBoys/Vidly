using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Vidly.Models;
using Vidly.Dtos;
using AutoMapper;

namespace Vidly.Controllers.Api
{
    public class CustomersController : ApiController
    {
        //reference to the db and link to the customers controller
        // below changes to the dto code mapping
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        //return a list of customers from db
        // GET /api/customers
        public IHttpActionResult GetCustomers()
        {
            // remove the () because we are not calling the method if we call it it executes we need to delegate a reference to the method
            //return _context.Customers.ToList().Select(Mapper.Map<Customer, CustomerDto>);
            var customerDtos = _context.Customers.ToList().Select(Mapper.Map<Customer, CustomerDto>);

            return Ok(customerDtos);
        }

        //GET /api/customers/1
        //searches for a particular customer based on id and if they do not exist in db then throws a not found
        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            if(customer == null)
            {
                return NotFound();
            }

            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }

        /*
        // Brian's suggestiion getting customer based off their name/username instead of Id can be used later on if admin wants to search
        // a customer by their name quickly (assuming name/username is unique)
        // GET /api/customers/name={username}
        [Route("api/customers/name={username}")]
        public IHttpActionResult GetCustomerByName(string username)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Name == username);

            if (customer == null)
            {
                return NotFound();
            }

            return Ok(Mapper.Map<Customer, CustomerDto>(customer));

        } */

        // POST /api/customers
        // this action will only be performed if created an http post request
        // if you call the action PostCustomer instead of Create then you will not need the httppost Data annotation
        // above method is suggested by MSDN but might be a poor approach because if you rename the method then code will break
        [HttpPost]
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            if(!ModelState.IsValid)
            {
                return BadRequest();
            }

            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);
            _context.Customers.Add(customer);
            _context.SaveChanges();

            // add the id to the dto that is generated by db
            customerDto.Id = customer.Id;

            return Created(new Uri(Request.RequestUri+ "/" + customer.Id), customerDto);
        }

        // PUT /api/customers/1
        // the id comes from the url string and the customer comes from the request body
        // have to have the data annotations on this or else MSDN will not allow this action to take place
        //catherine amaral
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest();
            }

            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();
            // previous examples no second argument but if you have an existing object you can pass it in as a second argument
            // its being loaded into the context from above so we need our db to be able to track changes to this object

            Mapper.Map(customerDto, customerInDb);
            // now that its mapped you dont need the below lines anymore to map...
            //customerInDb.Name = customerDto.Name;
            //customerInDb.Birthdate = customerDto.Birthdate;
            //customerInDb.isSubscribedToNewsLetter = customerDto.isSubscribedToNewsLetter;
            //customerInDb.MembershipTypeId = customerDto.MembershipTypeId;

            _context.SaveChanges();

            return Ok();

        }

        // DELETE /api/customers/1
        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id, Customer customer)
        {
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();

            _context.Customers.Remove(customerInDb);
            _context.SaveChanges();

            return Ok();
        }

    }
}
