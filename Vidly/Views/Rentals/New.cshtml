@model dynamic
@{
    ViewBag.Title = "New Rental Form";
}

<h2>New Rental Form</h2>
@*usually you would do this but since we are using ajax @Html.BeginForm("action", "controller")*@
<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" name="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movie" data-rule-atLeastOneMovie="true" type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>

    <button class="btn btn-primary">Submit</button>
</form>
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            // client view model
            var vm = {
                movieIds: []
            };
            // blood hound object is a suggestion engine behind typeahead (calling the backend api and caching the result)
            //datum takes a function and transforms it into a bunch of strings
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                //prefetch: '../data/films/post_1960.json',  -- this is to get data before the page loads and we are not using this so out
                remote: {
                    // the query will be the things the user types
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'customers',
                display: 'name',
                source: customers
            }).on("typeahead:select", function (e, customer) {
                vm.customerId = customer.id;
            }
                );

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                //prefetch: '../data/films/post_1960.json',  -- this is to get data before the page loads and we are not using this so out
                remote: {
                    // the query will be the things the user types
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie) {
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");

                $("#movie").typeahead("val", ""); // clear after selection

                vm.movieIds.push(movie.id);
            });

            // simple jquery validation
            // trigger this by adding the data-rule-functionName = "true" to the input - Adding Data Attribute
            //jquery looks for any attribute starting with data-rule-.. to apply this to
            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;
            }, "Please select a valid Customer");

            $.validator.addMethod("atLeastOneMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least 1 Movie");

            // this plugs in validation for this form
            // submitHandler will only post the form if it is validated no empty entries
            var validator = $("#newRental").validate({
                submitHandler: function () {
                    //e.preventDefault(); // this will prevent the form from submitting normally as a traditional html form instead of ajax

                    $.ajax({
                        url: "/api/NewRentals",
                        method: "post",
                        data: vm
                    })
                    .done(function () {
                        //System.Diagnostics.Debug.WriteLine();
                        console.log("done");
                        toastr.success("Rentals Successfully Recorded");

                        // upon success clear the form
                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();

                        vm = { movieIds: [] };
                        // reset the form interms of its validation to prevent double submit and stuff
                        validator.resetForm();
                    })
                    .fail(function () {
                        toastr.error("Something went wrong :(");
                    });
                    // this is here because the jquery function isnt passed the e from above its passed a reference to the form so it will bug out.  So this is the alternate method to prevent normal submitting
                    return false;
                }
            });        
        });
    </script>
}
